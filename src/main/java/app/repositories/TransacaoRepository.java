package app.repositories;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import app.entities.Transacao;
import app.entities.TransacaoRecorrente;
import app.enums.Periodicidade;
import app.enums.TipoTransacao;

@Repository
public interface TransacaoRepository extends JpaRepository<Transacao, Long> {

	// üîπ Busca transa√ß√µes por conta espec√≠fica
	List<Transacao> findByContaId(Long contaId);

	// üîπ Busca transa√ß√µes por categoria espec√≠fica
	List<Transacao> findByCategoriaId(Long categoriaId);

	// üîπ Busca transa√ß√µes de um usu√°rio filtradas por tipo (Entrada ou Sa√≠da)
	@Query("SELECT t FROM Transacao t WHERE t.usuario.id = :usuarioId AND t.tipo = :tipo")
	List<Transacao> findByUsuarioAndTipo(@Param("usuarioId") Long usuarioId, @Param("tipo") TipoTransacao tipo);

	// üîç Busca transa√ß√µes associadas a uma transa√ß√£o recorrente com base na
	// periodicidade
	@Query("SELECT t FROM Transacao t JOIN t.transacaoRecorrente tr WHERE tr.periodicidade = :periodicidade")
	List<Transacao> findByPeriodicidade(@Param("periodicidade") Periodicidade periodicidade);

	// üîç Busca transa√ß√µes de um usu√°rio filtrando pela periodicidade da recorr√™ncia
	@Query("SELECT t FROM Transacao t JOIN t.transacaoRecorrente tr WHERE t.usuario.id = :usuarioId AND tr.periodicidade = :periodicidade")
	List<Transacao> findByUsuarioAndPeriodicidade(@Param("usuarioId") Long usuarioId,
			@Param("periodicidade") Periodicidade periodicidade);

	// üîç Busca todas as transa√ß√µes associadas a uma transa√ß√£o recorrente espec√≠fica
	@Query("SELECT t FROM Transacao t WHERE t.transacaoRecorrente.id = :recorrenteId")
	List<Transacao> findByTransacaoRecorrenteId(@Param("recorrenteId") Long recorrenteId);

	@Query("SELECT COUNT(t) FROM Transacao t WHERE t.transacaoRecorrente.id = :recorrenteId")
	int countByTransacaoRecorrenteId(@Param("recorrenteId") Long recorrenteId);

	// üîç Verifica se j√° existe uma transa√ß√£o gerada para a pr√≥xima execu√ß√£o da
	// transa√ß√£o recorrente
	boolean existsByTransacaoRecorrenteAndDataTransacao(TransacaoRecorrente transacaoRecorrente,
			LocalDateTime dataTransacao);
}
